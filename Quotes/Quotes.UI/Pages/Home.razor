@page "/"

@using Quotes.UI.DTO
@using Quotes.UI.QuotesServices
@inject IQuotesApiService QuotesApiService
@inject NavigationManager NavigationManager
<PageTitle>Quotes</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <div class="d-flex flex-row justify-content-between">
                    <MudText Typo="Typo.h6">Search Quotes</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowDropDown" Color="Color.Primary" OnClick="@(()=>isSearchExpanded = !isSearchExpanded)"></MudIconButton>
                </div>
                
                <MudCollapse Expanded="@isSearchExpanded">
                    <MudTextField Label="Author" @bind-Value="searchAuthor" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField Label="Tags (comma separated)" @bind-Value="searchTags" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField Label="Quote Content" @bind-Value="searchContent" Variant="Variant.Outlined"></MudTextField>
                    <div class="d-flex flex-row justify-content-center mt-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SearchQuotes" Class="mr-2">Search</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="clearSearch" Class="ml-2">Clear Search</MudButton>
                    </div>
                    
                </MudCollapse>
                
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <div class="d-flex flex-row justify-content-between mt-1 mb-1">
            <MudText Typo="Typo.h4" Color="Color.Primary">Inspirational Quotes</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddQuote">Add Quote</MudButton>
        </div>
        
    </MudItem>
    <MudItem xs="12">
        <MudTable Items="quotes" Hover="true" Striped="true">
            <HeaderContent>
                <MudTh>Author</MudTh>
                <MudTh>Tags</MudTh>
                <MudTh>Quote</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Author</MudTd>
                <MudTd>@string.Join(", ", @context.Tags)</MudTd>
                <MudTd>@context.QuoteContent</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(()=>EditQuote(context.Id))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(()=>DeleteQuote(context.Id))"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    private bool isSearchExpanded = false;
    private string searchAuthor;
    private string searchTags;
    private string searchContent;
    private List<Quotes.UI.DTO.QuoteDto> quotes = new();

    protected override async Task OnInitializedAsync()
    {
        quotes = (await QuotesApiService.GetAllQuotes()).ToList();
    }

    private async Task SearchQuotes()
    {
        var tags = string.IsNullOrWhiteSpace(searchTags) ? new List<string>() : searchTags.Split(',').ToList();
        quotes = (await QuotesApiService.SearchQuotes(searchAuthor, tags, searchContent)).ToList();
    }

    private void AddQuote()
    {
        NavigationManager.NavigateTo("/add-quote");
    }

    private void clearSearch()
    {
        searchAuthor = string.Empty;
        searchTags = string.Empty;
        searchContent = string.Empty;
    }

    private void EditQuote(int id)
    {
        NavigationManager.NavigateTo($"/edit-quote/{id}");
    }

    private async Task DeleteQuote(int id)
    {
        await QuotesApiService.DeleteQuote(id);
        quotes = (await QuotesApiService.GetAllQuotes()).ToList();
    }
}
